{"version":3,"sources":["../../../../../../src/start/server/middleware/inspector/LaunchBrowserImplMacOS.ts"],"sourcesContent":["import * as osascript from '@expo/osascript';\nimport { spawn, type ChildProcess } from 'child_process';\nimport { sync as globSync } from 'glob';\nimport path from 'path';\n\nimport {\n  LaunchBrowserTypes,\n  type LaunchBrowser,\n  type LaunchBrowserInstance,\n  LaunchBrowserTypesEnum,\n} from './LaunchBrowser.types';\n\n/**\n * Browser implementation for macOS\n */\nexport default class LaunchBrowserImplMacOS implements LaunchBrowser, LaunchBrowserInstance {\n  private _process: ChildProcess | undefined;\n\n  MAP = {\n    [LaunchBrowserTypesEnum.CHROME]: 'google chrome',\n    [LaunchBrowserTypesEnum.EDGE]: 'microsoft edge',\n    [LaunchBrowserTypesEnum.BRAVE]: 'brave browser',\n  };\n\n  async isSupportedBrowser(browserType: LaunchBrowserTypes): Promise<boolean> {\n    let result = false;\n    try {\n      await osascript.execAsync(`id of application \"${this.MAP[browserType]}\"`);\n      result = true;\n    } catch {\n      result = false;\n    }\n    return result;\n  }\n\n  async createTempBrowserDir(baseDirName: string) {\n    return path.join(require('temp-dir'), baseDirName);\n  }\n\n  async launchAsync(\n    browserType: LaunchBrowserTypes,\n    args: string[]\n  ): Promise<LaunchBrowserInstance> {\n    const appDirectory = await osascript.execAsync(\n      `POSIX path of (path to application \"${this.MAP[browserType]}\")`\n    );\n    const appPath = globSync('Contents/MacOS/*', { cwd: appDirectory.trim(), absolute: true })?.[0];\n    if (!appPath) {\n      throw new Error(`Cannot find application path from ${appDirectory}Contents/MacOS`);\n    }\n    this._process = spawn(appPath, args, { stdio: 'ignore' });\n\n    return this;\n  }\n\n  async close(): Promise<void> {\n    this._process?.kill();\n    this._process = undefined;\n  }\n}\n"],"names":["LaunchBrowserImplMacOS","MAP","LaunchBrowserTypesEnum","CHROME","EDGE","BRAVE","isSupportedBrowser","browserType","result","osascript","execAsync","createTempBrowserDir","baseDirName","path","join","require","launchAsync","args","globSync","appDirectory","appPath","cwd","trim","absolute","Error","_process","spawn","stdio","close","kill","undefined"],"mappings":"AAAA;;;;+BAYA;;CAEC,GACD,SA4CC;;aA5CoBA,sBAAsB;;;+DAfhB,iBAAiB;;;;;;;yBACH,eAAe;;;;;;;yBACvB,MAAM;;;;;;;8DACtB,MAAM;;;;;;oCAOhB,uBAAuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKf,MAAMA,sBAAsB;IAGzCC,GAAG,GAAG;QACJ,CAACC,mBAAsB,uBAAA,CAACC,MAAM,CAAC,EAAE,eAAe;QAChD,CAACD,mBAAsB,uBAAA,CAACE,IAAI,CAAC,EAAE,gBAAgB;QAC/C,CAACF,mBAAsB,uBAAA,CAACG,KAAK,CAAC,EAAE,eAAe;KAChD,CAAC;UAEIC,kBAAkB,CAACC,WAA+B,EAAoB;QAC1E,IAAIC,MAAM,GAAG,KAAK,AAAC;QACnB,IAAI;YACF,MAAMC,UAAS,EAAA,CAACC,SAAS,CAAC,CAAC,mBAAmB,EAAE,IAAI,CAACT,GAAG,CAACM,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1EC,MAAM,GAAG,IAAI,CAAC;QAChB,EAAE,OAAM;YACNA,MAAM,GAAG,KAAK,CAAC;QACjB,CAAC;QACD,OAAOA,MAAM,CAAC;IAChB;UAEMG,oBAAoB,CAACC,WAAmB,EAAE;QAC9C,OAAOC,KAAI,EAAA,QAAA,CAACC,IAAI,CAACC,OAAO,CAAC,UAAU,CAAC,EAAEH,WAAW,CAAC,CAAC;IACrD;UAEMI,WAAW,CACfT,WAA+B,EAC/BU,IAAc,EACkB;YAIhBC,GAA0E;QAH1F,MAAMC,YAAY,GAAG,MAAMV,UAAS,EAAA,CAACC,SAAS,CAC5C,CAAC,oCAAoC,EAAE,IAAI,CAACT,GAAG,CAACM,WAAW,CAAC,CAAC,EAAE,CAAC,CACjE,AAAC;QACF,MAAMa,OAAO,GAAGF,CAAAA,GAA0E,GAA1EA,IAAAA,KAAQ,EAAA,KAAA,EAAC,kBAAkB,EAAE;YAAEG,GAAG,EAAEF,YAAY,CAACG,IAAI,EAAE;YAAEC,QAAQ,EAAE,IAAI;SAAE,CAAC,SAAK,GAA/EL,KAAAA,CAA+E,GAA/EA,GAA0E,AAAE,CAAC,CAAC,CAAC,AAAC;QAChG,IAAI,CAACE,OAAO,EAAE;YACZ,MAAM,IAAII,KAAK,CAAC,CAAC,kCAAkC,EAAEL,YAAY,CAAC,cAAc,CAAC,CAAC,CAAC;QACrF,CAAC;QACD,IAAI,CAACM,QAAQ,GAAGC,IAAAA,aAAK,EAAA,MAAA,EAACN,OAAO,EAAEH,IAAI,EAAE;YAAEU,KAAK,EAAE,QAAQ;SAAE,CAAC,CAAC;QAE1D,OAAO,IAAI,CAAC;IACd;UAEMC,KAAK,GAAkB;YAC3B,GAAa;QAAb,CAAA,GAAa,GAAb,IAAI,CAACH,QAAQ,SAAM,GAAnB,KAAA,CAAmB,GAAnB,GAAa,CAAEI,IAAI,EAAE,CAAC;QACtB,IAAI,CAACJ,QAAQ,GAAGK,SAAS,CAAC;IAC5B;CACD"}