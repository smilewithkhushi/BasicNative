{"version":3,"sources":["../../../../../../src/run/ios/appleDevice/protocol/GDBProtocol.ts"],"sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2018 Drifty Co.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Debug from 'debug';\nimport { Socket } from 'net';\n\nimport {\n  ProtocolClient,\n  ProtocolReader,\n  ProtocolReaderCallback,\n  ProtocolReaderFactory,\n  ProtocolWriter,\n} from './AbstractProtocol';\nimport { CommandError } from '../../../../utils/errors';\n\nconst debug = Debug('expo:apple-device:protocol:gdb');\nconst ACK_SUCCESS = '+'.charCodeAt(0);\n\nexport interface GDBMessage {\n  cmd: string;\n  args: string[];\n}\n\nexport class GDBProtocolClient extends ProtocolClient<GDBMessage> {\n  constructor(socket: Socket) {\n    super(socket, new ProtocolReaderFactory(GDBProtocolReader), new GDBProtocolWriter());\n  }\n}\n\nexport class GDBProtocolReader extends ProtocolReader {\n  constructor(callback: ProtocolReaderCallback) {\n    super(1 /* \"Header\" is '+' or '-' */, callback);\n  }\n\n  onData(data?: Buffer) {\n    // the GDB protocol does not support body length in its header so we cannot rely on\n    // the parent implementation to determine when a payload is complete\n    try {\n      // if there's data, add it to the existing buffer\n      this.buffer = data ? Buffer.concat([this.buffer, data]) : this.buffer;\n\n      // do we have enough bytes to proceed\n      if (this.buffer.length < this.headerSize) {\n        return; // incomplete header, wait for more\n      }\n\n      // first, check the header\n      if (this.parseHeader(this.buffer) === -1) {\n        // we have a valid header so check the body. GDB packets will always be a leading '$', data bytes,\n        // a trailing '#', and a two digit checksum. minimum valid body is the empty response '$#00'\n        // https://developer.apple.com/library/archive/documentation/DeveloperTools/gdb/gdb/gdb_33.html\n        const packetData = this.buffer.toString().match('\\\\$.*#[0-9a-f]{2}');\n        if (packetData == null) {\n          return; // incomplete body, wait for more\n        }\n        // extract the body and update the buffer\n        const body = Buffer.from(packetData[0]);\n        this.buffer = this.buffer.slice(this.headerSize + body.length);\n        // parse the payload and recurse if there is more data to process\n        this.callback(this.parseBody(body));\n        if (this.buffer.length) {\n          this.onData();\n        }\n      }\n    } catch (err: any) {\n      this.callback(null, err);\n    }\n  }\n\n  parseHeader(data: Buffer) {\n    if (data[0] !== ACK_SUCCESS) {\n      throw new CommandError('APPLE_DEVICE_GDB', 'Unsuccessful debugserver response');\n    } // TODO: retry?\n    return -1;\n  }\n\n  parseBody(buffer: Buffer) {\n    debug(`Response body: ${buffer.toString()}`);\n    // check for checksum\n    const checksum = buffer.slice(-3).toString();\n    if (checksum.match(/#[0-9a-f]{2}/)) {\n      // remove '$' prefix and checksum\n      const msg = buffer.slice(1, -3).toString();\n      if (validateChecksum(checksum, msg)) {\n        return msg;\n      } else if (msg.startsWith('E')) {\n        if (msg.match(/the device was not, or could not be, unlocked/)) {\n          throw new CommandError('APPLE_DEVICE_LOCKED', 'Device is currently locked.');\n        }\n\n        // Error message from debugserver -- Drop the `E`\n        return msg.slice(1);\n      } else {\n        throw new CommandError(\n          'APPLE_DEVICE_GDB',\n          `Invalid checksum received from debugserver. (checksum: ${checksum}, msg: ${msg})`\n        );\n      }\n    } else {\n      throw new CommandError('APPLE_DEVICE_GDB', \"Didn't receive checksum\");\n    }\n  }\n}\n\nexport class GDBProtocolWriter implements ProtocolWriter {\n  write(socket: Socket, msg: GDBMessage) {\n    const { cmd, args } = msg;\n    debug(`Socket write: ${cmd}, args: ${args}`);\n    // hex encode and concat all args\n    const encodedArgs = args\n      .map((arg) => Buffer.from(arg).toString('hex'))\n      .join()\n      .toUpperCase();\n    const checksumStr = calculateChecksum(cmd + encodedArgs);\n    const formattedCmd = `$${cmd}${encodedArgs}#${checksumStr}`;\n    socket.write(formattedCmd);\n  }\n}\n\n// hex value of (sum of cmd chars mod 256)\nfunction calculateChecksum(cmdStr: string) {\n  let checksum = 0;\n  for (let i = 0; i < cmdStr.length; i++) {\n    checksum += cmdStr.charCodeAt(i);\n  }\n  let result = (checksum % 256).toString(16);\n  // pad if necessary\n  if (result.length === 1) {\n    result = `0${result}`;\n  }\n  return result;\n}\n\nexport function validateChecksum(checksum: string, msg: string) {\n  // remove '#' from checksum\n  const checksumVal = checksum.startsWith('#') ? checksum.slice(1) : checksum;\n  // remove '$' from msg and calculate its checksum\n  const computedChecksum = calculateChecksum(msg);\n  // debug(`Checksum: ${checksumVal}, computed checksum: ${computedChecksum}`);\n  return checksumVal === computedChecksum;\n}\n"],"names":["GDBProtocolClient","GDBProtocolReader","GDBProtocolWriter","validateChecksum","debug","Debug","ACK_SUCCESS","charCodeAt","ProtocolClient","constructor","socket","ProtocolReaderFactory","ProtocolReader","callback","onData","data","buffer","Buffer","concat","length","headerSize","parseHeader","packetData","toString","match","body","from","slice","parseBody","err","CommandError","checksum","msg","startsWith","write","cmd","args","encodedArgs","map","arg","join","toUpperCase","checksumStr","calculateChecksum","formattedCmd","cmdStr","i","result","checksumVal","computedChecksum"],"mappings":"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"}