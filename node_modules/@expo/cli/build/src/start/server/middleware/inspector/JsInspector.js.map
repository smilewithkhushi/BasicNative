{"version":3,"sources":["../../../../../../src/start/server/middleware/inspector/JsInspector.ts"],"sourcesContent":["import type { CustomMessageHandlerConnection } from '@react-native/dev-middleware';\nimport chalk from 'chalk';\nimport fetch from 'node-fetch';\n\nimport { launchInspectorBrowserAsync, type LaunchBrowserInstance } from './LaunchBrowser';\nimport { Log } from '../../../../log';\nimport { env } from '../../../../utils/env';\nimport { pageIsSupported } from '../../metro/debugging/pageIsSupported';\n\nexport interface MetroInspectorProxyApp {\n  id: string;\n  description: string;\n  title: string;\n  faviconUrl: string;\n  devtoolsFrontendUrl: string;\n  type: 'node';\n  webSocketDebuggerUrl: string;\n  vm: 'Hermes' | \"don't use\";\n  /** Added since React Native 0.73.x */\n  deviceName?: string;\n  /** Added since React Native 0.74.x */\n  reactNative?: {\n    logicalDeviceId: string;\n    capabilities: CustomMessageHandlerConnection['page']['capabilities'];\n  };\n}\n\nlet openingBrowserInstance: LaunchBrowserInstance | null = null;\n\nexport function openJsInspector(metroBaseUrl: string, app: MetroInspectorProxyApp) {\n  if (env.EXPO_USE_UNSTABLE_DEBUGGER) {\n    return openExperimentalJsInspector(metroBaseUrl, app);\n  } else {\n    return openClassicJsInspector(app);\n  }\n}\n\nasync function openExperimentalJsInspector(metroBaseUrl: string, app: MetroInspectorProxyApp) {\n  const device = encodeURIComponent(app.id);\n  const appId = encodeURIComponent(app.description);\n  await fetch(`${metroBaseUrl}/open-debugger?device=${device}&appId=${appId}`, { method: 'POST' });\n}\n\n/**\n * Chrome DevTools UI implemented for SDK <49.\n * TODO(cedric): Remove this when we fully swap over to the new React Native JS Inspector.\n */\nasync function openClassicJsInspector(app: MetroInspectorProxyApp) {\n  Log.log(chalk`{bold Debug:} Opening JavaScript inspector in the browser...`);\n\n  // To update devtoolsFrontendRev, find the full commit hash in the url:\n  // https://chromium.googlesource.com/chromium/src.git/+log/refs/tags/{CHROME_VERSION}/chrome/VERSION\n  //\n  // 1. Replace {CHROME_VERSION} with the target chrome version\n  // 2. Click the first log item in the webpage\n  // 3. The full commit hash is the desired revision\n  const devtoolsFrontendRev = 'd9568d04d7dd79269c5a655d7ada69650c5a8336'; // Chrome 100.0.4896.75\n\n  const urlBase = `https://chrome-devtools-frontend.appspot.com/serve_rev/@${devtoolsFrontendRev}/devtools_app.html`;\n  const ws = app.webSocketDebuggerUrl.replace(/^ws:\\/\\//, '');\n  const url = `${urlBase}?panel=console&ws=${encodeURIComponent(ws)}`;\n  await closeJsInspector();\n  openingBrowserInstance = await launchInspectorBrowserAsync(url);\n}\n\nexport async function closeJsInspector() {\n  await openingBrowserInstance?.close();\n  openingBrowserInstance = null;\n}\n\nexport async function queryInspectorAppAsync(\n  metroServerOrigin: string,\n  appId: string\n): Promise<MetroInspectorProxyApp | null> {\n  const apps = await queryAllInspectorAppsAsync(metroServerOrigin);\n  return apps.find((app) => app.description === appId) ?? null;\n}\n\nexport async function queryAllInspectorAppsAsync(\n  metroServerOrigin: string\n): Promise<MetroInspectorProxyApp[]> {\n  const resp = await fetch(`${metroServerOrigin}/json/list`);\n  const apps: MetroInspectorProxyApp[] = transformApps(await resp.json());\n  // Only use targets with better reloading support\n  return apps.filter((app) => pageIsSupported(app));\n}\n\n// The description of `React Native Experimental (Improved Chrome Reloads)` target is `don't use` from metro.\n// This function tries to transform the unmeaningful description to appId\nfunction transformApps(apps: MetroInspectorProxyApp[]): MetroInspectorProxyApp[] {\n  const deviceIdToAppId: Record<string, string> = {};\n\n  for (const app of apps) {\n    if (app.description !== \"don't use\") {\n      const deviceId = app.reactNative?.logicalDeviceId ?? app.id.split('-')[0];\n      const appId = app.description;\n      deviceIdToAppId[deviceId] = appId;\n    }\n  }\n\n  return apps.map((app) => {\n    if (app.description === \"don't use\") {\n      const deviceId = app.reactNative?.logicalDeviceId ?? app.id.split('-')[0];\n      app.description = deviceIdToAppId[deviceId] ?? app.description;\n    }\n    return app;\n  });\n}\n"],"names":["openJsInspector","closeJsInspector","queryInspectorAppAsync","queryAllInspectorAppsAsync","openingBrowserInstance","metroBaseUrl","app","env","EXPO_USE_UNSTABLE_DEBUGGER","openExperimentalJsInspector","openClassicJsInspector","device","encodeURIComponent","id","appId","description","fetch","method","Log","log","chalk","devtoolsFrontendRev","urlBase","ws","webSocketDebuggerUrl","replace","url","launchInspectorBrowserAsync","close","metroServerOrigin","apps","find","resp","transformApps","json","filter","pageIsSupported","deviceIdToAppId","deviceId","reactNative","logicalDeviceId","split","map"],"mappings":"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"}