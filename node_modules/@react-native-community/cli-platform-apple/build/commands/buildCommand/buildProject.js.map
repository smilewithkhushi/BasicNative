{"version":3,"names":["buildProject","xcodeProject","platform","udid","mode","scheme","args","Promise","resolve","reject","simulatorDest","simulatorDestinationMap","CLIError","Object","values","supportedPlatforms","join","xcodebuildArgs","isWorkspace","name","xcconfig","buildFolder","destination","extraParams","push","loader","getLoader","logger","info","chalk","dim","xcodebuildOutputFormatter","verbose","xcbeautifyAvailable","child_process","spawn","stdio","process","stdout","stderr","xcprettyAvailable","buildProcess","getProcessOptions","buildOutput","errorOutput","on","data","stringData","toString","stdin","write","isVerbose","debug","start","repeat","length","code","end","stop","printRunDoctorTip","undefined","success","execSync","error","packager","terminal","port","String","env","RCT_TERMINAL","RCT_METRO_PORT"],"sources":["../../../src/commands/buildCommand/buildProject.ts"],"sourcesContent":["import child_process, {\n  ChildProcess,\n  SpawnOptionsWithoutStdio,\n} from 'child_process';\nimport chalk from 'chalk';\nimport {IOSProjectInfo} from '@react-native-community/cli-types';\nimport {\n  logger,\n  CLIError,\n  printRunDoctorTip,\n  getLoader,\n} from '@react-native-community/cli-tools';\nimport type {BuildFlags} from './buildOptions';\nimport {simulatorDestinationMap} from './simulatorDestinationMap';\nimport {supportedPlatforms} from '../../config/supportedPlatforms';\nimport {ApplePlatform} from '../../types';\n\nexport function buildProject(\n  xcodeProject: IOSProjectInfo,\n  platform: ApplePlatform,\n  udid: string | undefined,\n  mode: string,\n  scheme: string,\n  args: BuildFlags,\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const simulatorDest = simulatorDestinationMap?.[platform];\n\n    if (!simulatorDest) {\n      reject(\n        new CLIError(\n          `Unknown platform: ${platform}. Please, use one of: ${Object.values(\n            supportedPlatforms,\n          ).join(', ')}.`,\n        ),\n      );\n      return;\n    }\n\n    const xcodebuildArgs = [\n      xcodeProject.isWorkspace ? '-workspace' : '-project',\n      xcodeProject.name,\n      ...(args.xcconfig ? ['-xcconfig', args.xcconfig] : []),\n      ...(args.buildFolder ? ['-derivedDataPath', args.buildFolder] : []),\n      '-configuration',\n      mode,\n      '-scheme',\n      scheme,\n      '-destination',\n      (udid\n        ? `id=${udid}`\n        : mode === 'Debug'\n        ? `generic/platform=${simulatorDest}`\n        : `generic/platform=${platform}`) +\n        (args.destination ? ',' + args.destination : ''),\n    ];\n\n    if (args.extraParams) {\n      xcodebuildArgs.push(...args.extraParams);\n    }\n\n    const loader = getLoader();\n    logger.info(\n      `Building ${chalk.dim(\n        `(using \"xcodebuild ${xcodebuildArgs.join(' ')}\")`,\n      )}`,\n    );\n    let xcodebuildOutputFormatter: ChildProcess | any;\n    if (!args.verbose) {\n      if (xcbeautifyAvailable()) {\n        xcodebuildOutputFormatter = child_process.spawn('xcbeautify', [], {\n          stdio: ['pipe', process.stdout, process.stderr],\n        });\n      } else if (xcprettyAvailable()) {\n        xcodebuildOutputFormatter = child_process.spawn('xcpretty', [], {\n          stdio: ['pipe', process.stdout, process.stderr],\n        });\n      }\n    }\n\n    const buildProcess = child_process.spawn(\n      'xcodebuild',\n      xcodebuildArgs,\n      getProcessOptions(args),\n    );\n    let buildOutput = '';\n    let errorOutput = '';\n    buildProcess.stdout.on('data', (data: Buffer) => {\n      const stringData = data.toString();\n      buildOutput += stringData;\n      if (xcodebuildOutputFormatter) {\n        xcodebuildOutputFormatter.stdin.write(data);\n      } else {\n        if (logger.isVerbose()) {\n          logger.debug(stringData);\n        } else {\n          loader.start(\n            `Building the app${'.'.repeat(buildOutput.length % 10)}`,\n          );\n        }\n      }\n    });\n\n    buildProcess.stderr.on('data', (data: Buffer) => {\n      errorOutput += data;\n    });\n    buildProcess.on('close', (code: number) => {\n      if (xcodebuildOutputFormatter) {\n        xcodebuildOutputFormatter.stdin.end();\n      } else {\n        loader.stop();\n      }\n      if (code !== 0) {\n        printRunDoctorTip();\n        reject(\n          new CLIError(\n            `\n            Failed to build ${platform} project.\n\n            \"xcodebuild\" exited with error code '${code}'. To debug build\n            logs further, consider building your app with Xcode.app, by opening\n            '${xcodeProject.name}'.\n          `,\n            xcodebuildOutputFormatter\n              ? undefined\n              : buildOutput + '\\n' + errorOutput,\n          ),\n        );\n        return;\n      }\n      logger.success('Successfully built the app');\n      resolve(buildOutput);\n    });\n  });\n}\n\nfunction xcbeautifyAvailable() {\n  try {\n    child_process.execSync('xcbeautify --version', {\n      stdio: [0, 'pipe', 'ignore'],\n    });\n  } catch (error) {\n    return false;\n  }\n  return true;\n}\n\nfunction xcprettyAvailable() {\n  try {\n    child_process.execSync('xcpretty --version', {\n      stdio: [0, 'pipe', 'ignore'],\n    });\n  } catch (error) {\n    return false;\n  }\n  return true;\n}\n\nfunction getProcessOptions<T extends BuildFlags>(\n  args: T,\n): SpawnOptionsWithoutStdio {\n  if (\n    'packager' in args &&\n    typeof args.packager === 'boolean' &&\n    args.packager\n  ) {\n    const terminal =\n      'terminal' in args && typeof args.terminal === 'string'\n        ? args.terminal\n        : '';\n\n    const port =\n      'port' in args && typeof args.port === 'number' ? String(args.port) : '';\n\n    return {\n      env: {\n        ...process.env,\n        RCT_TERMINAL: terminal,\n        RCT_METRO_PORT: port,\n      },\n    };\n  }\n\n  return {\n    env: process.env,\n  };\n}\n"],"mappings":"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"}