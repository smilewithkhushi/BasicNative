{"version":3,"sources":["../../../../src/api/user/actions.ts"],"sourcesContent":["import assert from 'assert';\nimport chalk from 'chalk';\n\nimport { retryUsernamePasswordAuthWithOTPAsync } from './otp';\nimport { Actor, getUserAsync, loginAsync, ssoLoginAsync } from './user';\nimport * as Log from '../../log';\nimport { env } from '../../utils/env';\nimport { CommandError } from '../../utils/errors';\nimport { learnMore } from '../../utils/link';\nimport promptAsync, { Question } from '../../utils/prompts';\nimport { ApiV2Error } from '../rest/client';\n\n/** Show login prompt while prompting for missing credentials. */\nexport async function showLoginPromptAsync({\n  printNewLine = false,\n  otp,\n  ...options\n}: {\n  printNewLine?: boolean;\n  username?: string;\n  password?: string;\n  otp?: string;\n  sso?: boolean | undefined;\n} = {}): Promise<void> {\n  if (env.EXPO_OFFLINE) {\n    throw new CommandError('OFFLINE', 'Cannot authenticate in offline-mode');\n  }\n  const hasCredentials = options.username && options.password;\n  const sso = options.sso;\n\n  if (printNewLine) {\n    Log.log();\n  }\n\n  if (sso) {\n    await ssoLoginAsync();\n    return;\n  }\n\n  Log.log(\n    hasCredentials\n      ? `Logging in to EAS with email or username (exit and run 'npx expo login --help' for other login options)`\n      : `Log in to EAS with email or username (exit and run 'npx expo login --help' for other login options)`\n  );\n\n  let username = options.username;\n  let password = options.password;\n\n  if (!hasCredentials) {\n    const resolved = await promptAsync(\n      [\n        !options.username && {\n          type: 'text',\n          name: 'username',\n          message: 'Email or username',\n        },\n        !options.password && {\n          type: 'password',\n          name: 'password',\n          message: 'Password',\n        },\n      ].filter(Boolean) as Question<string>[],\n      {\n        nonInteractiveHelp: `Use the EXPO_TOKEN environment variable to authenticate in CI (${learnMore(\n          'https://docs.expo.dev/accounts/programmatic-access/'\n        )})`,\n      }\n    );\n    username ??= resolved.username;\n    password ??= resolved.password;\n  }\n  // This is just for the types.\n  assert(username && password);\n\n  try {\n    await loginAsync({\n      username,\n      password,\n      otp,\n    });\n  } catch (e) {\n    if (e instanceof ApiV2Error && e.expoApiV2ErrorCode === 'ONE_TIME_PASSWORD_REQUIRED') {\n      await retryUsernamePasswordAuthWithOTPAsync(\n        username,\n        password,\n        e.expoApiV2ErrorMetadata as any\n      );\n    } else {\n      throw e;\n    }\n  }\n}\n\n/** Ensure the user is logged in, if not, prompt to login. */\nexport async function ensureLoggedInAsync(): Promise<Actor> {\n  let user = await getUserAsync().catch(() => null);\n\n  if (!user) {\n    Log.warn(chalk.yellow`An Expo user account is required to proceed.`);\n    await showLoginPromptAsync({ printNewLine: true });\n    user = await getUserAsync();\n  }\n\n  assert(user, 'User should be logged in');\n  return user;\n}\n"],"names":["showLoginPromptAsync","ensureLoggedInAsync","printNewLine","otp","options","env","EXPO_OFFLINE","CommandError","hasCredentials","username","password","sso","Log","log","ssoLoginAsync","resolved","promptAsync","type","name","message","filter","Boolean","nonInteractiveHelp","learnMore","assert","loginAsync","e","ApiV2Error","expoApiV2ErrorCode","retryUsernamePasswordAuthWithOTPAsync","expoApiV2ErrorMetadata","user","getUserAsync","catch","warn","chalk","yellow"],"mappings":"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"}