{"version":3,"sources":["../../../../../src/run/ios/appleDevice/installOnDeviceAsync.ts"],"sourcesContent":["import chalk from 'chalk';\nimport { Ora } from 'ora';\nimport os from 'os';\nimport path from 'path';\n\nimport * as AppleDevice from './AppleDevice';\nimport * as devicectl from '../../../start/platforms/ios/devicectl';\nimport { ensureDirectory } from '../../../utils/dir';\nimport { CommandError } from '../../../utils/errors';\nimport { isInteractive } from '../../../utils/interactive';\nimport { ora } from '../../../utils/ora';\nimport { confirmAsync } from '../../../utils/prompts';\n\n/** Get the app_delta folder for faster subsequent rebuilds on devices. */\nexport function getAppDeltaDirectory(bundleId: string): string {\n  // TODO: Maybe use .expo folder instead for debugging\n  // TODO: Reuse existing folder from xcode?\n  const deltaFolder = path.join(os.tmpdir(), 'ios', 'app-delta', bundleId);\n  ensureDirectory(deltaFolder);\n  return deltaFolder;\n}\n\n/**\n * Wraps the apple device method for installing and running an app,\n * adds indicator and retry loop for when the device is locked.\n */\nexport async function installOnDeviceAsync(props: {\n  bundle: string;\n  bundleIdentifier: string;\n  appDeltaDirectory: string;\n  udid: string;\n  deviceName: string;\n}): Promise<void> {\n  const { bundle, bundleIdentifier, appDeltaDirectory, udid, deviceName } = props;\n  let indicator: Ora | undefined;\n\n  try {\n    // TODO: Connect for logs\n    await AppleDevice.runOnDevice({\n      udid,\n      appPath: bundle,\n      bundleId: bundleIdentifier,\n      waitForApp: false,\n      deltaPath: appDeltaDirectory,\n      onProgress({\n        status,\n        isComplete,\n        progress,\n      }: {\n        status: string;\n        isComplete: boolean;\n        progress: number;\n      }) {\n        if (!indicator) {\n          indicator = ora(status).start();\n        }\n        indicator.text = `${chalk.bold(status)} ${progress}%`;\n        if (isComplete) {\n          indicator.succeed();\n        }\n      },\n    });\n  } catch (error: any) {\n    if (error instanceof CommandError) {\n      if (error.code === 'APPLE_DEVICE_USBMUXD') {\n        // Couldn't find device, could be OTA...\n        // Fallback on much slower devicectl method which supports OTA installs.\n        if (devicectl.hasDevicectlEverBeenInstalled()) {\n          // This should never happen.\n          if (indicator) {\n            indicator.clear();\n          }\n          return await devicectl.installAndLaunchAppAsync(props);\n        }\n      }\n    }\n\n    if (indicator) {\n      indicator.fail();\n    }\n    if (error.code === 'APPLE_DEVICE_LOCKED') {\n      // Get the app name from the binary path.\n      const appName = path.basename(bundle).split('.')[0] ?? 'app';\n      if (\n        isInteractive() &&\n        (await confirmAsync({\n          message: `Cannot launch ${appName} because the device is locked. Unlock ${deviceName} to continue...`,\n          initial: true,\n        }))\n      ) {\n        return installOnDeviceAsync(props);\n      }\n      throw new CommandError(\n        `Cannot launch ${appName} on ${deviceName} because the device is locked.`\n      );\n    }\n    throw error;\n  }\n}\n"],"names":["getAppDeltaDirectory","installOnDeviceAsync","bundleId","deltaFolder","path","join","os","tmpdir","ensureDirectory","props","bundle","bundleIdentifier","appDeltaDirectory","udid","deviceName","indicator","AppleDevice","runOnDevice","appPath","waitForApp","deltaPath","onProgress","status","isComplete","progress","ora","start","text","chalk","bold","succeed","error","CommandError","code","devicectl","hasDevicectlEverBeenInstalled","clear","installAndLaunchAppAsync","fail","appName","basename","split","isInteractive","confirmAsync","message","initial"],"mappings":"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"}