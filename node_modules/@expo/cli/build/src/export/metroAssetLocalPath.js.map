{"version":3,"sources":["../../../src/export/metroAssetLocalPath.ts"],"sourcesContent":["/**\n * Copyright Â© 2023 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Based on the community asset persisting for Metro but with base path and web support:\n * https://github.com/facebook/react-native/blob/d6e0bc714ad4d215ede4949d3c4f44af6dea5dd3/packages/community-cli-plugin/src/commands/bundle/saveAssets.js#L1\n */\nimport type { AssetData } from 'metro';\nimport path from 'path';\n\nexport function getAssetLocalPath(\n  asset: Pick<AssetData, 'type' | 'httpServerLocation' | 'name'>,\n  { baseUrl, scale, platform }: { baseUrl?: string; scale: number; platform: string }\n): string {\n  if (platform === 'android') {\n    return getAssetLocalPathAndroid(asset, { baseUrl, scale });\n  }\n  return getAssetLocalPathDefault(asset, { baseUrl, scale });\n}\n\nfunction getAssetLocalPathAndroid(\n  asset: Pick<AssetData, 'type' | 'httpServerLocation' | 'name'>,\n  {\n    baseUrl,\n    scale,\n  }: {\n    // TODO: baseUrl support\n    baseUrl?: string;\n    scale: number;\n  }\n): string {\n  const androidFolder = getAndroidResourceFolderName(asset, scale);\n  const fileName = getResourceIdentifier(asset);\n  return path.join(androidFolder, `${fileName}.${asset.type}`);\n}\n\nfunction getAssetLocalPathDefault(\n  asset: Pick<AssetData, 'type' | 'httpServerLocation' | 'name'>,\n  { baseUrl, scale }: { baseUrl?: string; scale: number }\n): string {\n  const suffix = scale === 1 ? '' : `@${scale}x`;\n  const fileName = `${asset.name}${suffix}.${asset.type}`;\n\n  const adjustedHttpServerLocation = stripAssetPrefix(asset.httpServerLocation, baseUrl);\n\n  return path.join(\n    // Assets can have relative paths outside of the project root.\n    // Replace `../` with `_` to make sure they don't end up outside of\n    // the expected assets directory.\n    adjustedHttpServerLocation.replace(/^\\/+/g, '').replace(/\\.\\.\\//g, '_'),\n    fileName\n  );\n}\n\nexport function stripAssetPrefix(path: string, baseUrl?: string) {\n  path = path.replace(/\\/assets\\?export_path=(.*)/, '$1');\n\n  // TODO: Windows?\n  if (baseUrl) {\n    return path.replace(/^\\/+/g, '').replace(\n      new RegExp(\n        `^${baseUrl\n          .replace(/^\\/+/g, '')\n          .replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n          .replace(/-/g, '\\\\x2d')}`,\n        'g'\n      ),\n      ''\n    );\n  }\n  return path;\n}\n\n/**\n * FIXME: using number to represent discrete scale numbers is fragile in essence because of\n * floating point numbers imprecision.\n */\nfunction getAndroidAssetSuffix(scale: number): string | null {\n  switch (scale) {\n    case 0.75:\n      return 'ldpi';\n    case 1:\n      return 'mdpi';\n    case 1.5:\n      return 'hdpi';\n    case 2:\n      return 'xhdpi';\n    case 3:\n      return 'xxhdpi';\n    case 4:\n      return 'xxxhdpi';\n    default:\n      return null;\n  }\n}\n\n// See https://developer.android.com/guide/topics/resources/drawable-resource.html\nexport const drawableFileTypes = new Set<string>(['gif', 'jpeg', 'jpg', 'png', 'webp', 'xml']);\n\nfunction getAndroidResourceFolderName(asset: Pick<AssetData, 'type'>, scale: number): string {\n  if (!drawableFileTypes.has(asset.type)) {\n    return 'raw';\n  }\n  const suffix = getAndroidAssetSuffix(scale);\n  if (!suffix) {\n    throw new Error(\n      `Asset \"${JSON.stringify(asset)}\" does not use a supported Android resolution suffix`\n    );\n  }\n  return `drawable-${suffix}`;\n}\n\nfunction getResourceIdentifier(asset: Pick<AssetData, 'httpServerLocation' | 'name'>): string {\n  const folderPath = getBaseUrl(asset);\n  return `${folderPath}/${asset.name}`\n    .toLowerCase()\n    .replace(/\\//g, '_') // Encode folder structure in file name\n    .replace(/([^a-z0-9_])/g, '') // Remove illegal chars\n    .replace(/^assets_/, ''); // Remove \"assets_\" prefix\n}\n\nfunction getBaseUrl(asset: Pick<AssetData, 'httpServerLocation'>): string {\n  let baseUrl = asset.httpServerLocation;\n  if (baseUrl[0] === '/') {\n    baseUrl = baseUrl.substring(1);\n  }\n  return baseUrl;\n}\n"],"names":["getAssetLocalPath","stripAssetPrefix","drawableFileTypes","asset","baseUrl","scale","platform","getAssetLocalPathAndroid","getAssetLocalPathDefault","androidFolder","getAndroidResourceFolderName","fileName","getResourceIdentifier","path","join","type","suffix","name","adjustedHttpServerLocation","httpServerLocation","replace","RegExp","getAndroidAssetSuffix","Set","has","Error","JSON","stringify","folderPath","getBaseUrl","toLowerCase","substring"],"mappings":"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"}