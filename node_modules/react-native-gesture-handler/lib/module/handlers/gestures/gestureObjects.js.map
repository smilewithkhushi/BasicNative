{"version":3,"sources":["gestureObjects.ts"],"names":["FlingGesture","ForceTouchGesture","ComposedGesture","ExclusiveGesture","SimultaneousGesture","LongPressGesture","PanGesture","PinchGesture","RotationGesture","TapGesture","NativeGesture","ManualGesture","HoverGesture","GestureObjects","Tap","Pan","Pinch","Rotation","Fling","LongPress","ForceTouch","Native","Manual","Hover","Race","gestures","Simultaneous","Exclusive"],"mappings":"AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,SACEC,eADF,EAEEC,gBAFF,EAGEC,mBAHF,QAIO,sBAJP;AAKA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAG;AAC5B;AACF;AACA;AACA;AACEC,EAAAA,GAAG,EAAE,MAAM;AACT,WAAO,IAAIL,UAAJ,EAAP;AACD,GAP2B;;AAS5B;AACF;AACA;AACA;AACEM,EAAAA,GAAG,EAAE,MAAM;AACT,WAAO,IAAIT,UAAJ,EAAP;AACD,GAf2B;;AAiB5B;AACF;AACA;AACA;AACEU,EAAAA,KAAK,EAAE,MAAM;AACX,WAAO,IAAIT,YAAJ,EAAP;AACD,GAvB2B;;AAyB5B;AACF;AACA;AACA;AACEU,EAAAA,QAAQ,EAAE,MAAM;AACd,WAAO,IAAIT,eAAJ,EAAP;AACD,GA/B2B;;AAiC5B;AACF;AACA;AACA;AACEU,EAAAA,KAAK,EAAE,MAAM;AACX,WAAO,IAAIlB,YAAJ,EAAP;AACD,GAvC2B;;AAyC5B;AACF;AACA;AACA;AACEmB,EAAAA,SAAS,EAAE,MAAM;AACf,WAAO,IAAId,gBAAJ,EAAP;AACD,GA/C2B;;AAiD5B;AACF;AACA;AACA;AACA;AACEe,EAAAA,UAAU,EAAE,MAAM;AAChB,WAAO,IAAInB,iBAAJ,EAAP;AACD,GAxD2B;;AA0D5B;AACF;AACA;AACA;AACA;AACEoB,EAAAA,MAAM,EAAE,MAAM;AACZ,WAAO,IAAIX,aAAJ,EAAP;AACD,GAjE2B;;AAmE5B;AACF;AACA;AACA;AACA;AACA;AACEY,EAAAA,MAAM,EAAE,MAAM;AACZ,WAAO,IAAIX,aAAJ,EAAP;AACD,GA3E2B;;AA6E5B;AACF;AACA;AACA;AACA;AACA;AACEY,EAAAA,KAAK,EAAE,MAAM;AACX,WAAO,IAAIX,YAAJ,EAAP;AACD,GArF2B;;AAuF5B;AACF;AACA;AACA;AACA;AACEY,EAAAA,IAAI,EAAE,CAAC,GAAGC,QAAJ,KAA4B;AAChC,WAAO,IAAIvB,eAAJ,CAAoB,GAAGuB,QAAvB,CAAP;AACD,GA9F2B;;AAgG5B;AACF;AACA;AACA;AACEC,EAAAA,YAAY,CAAC,GAAGD,QAAJ,EAAyB;AACnC,WAAO,IAAIrB,mBAAJ,CAAwB,GAAGqB,QAA3B,CAAP;AACD,GAtG2B;;AAwG5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEE,EAAAA,SAAS,CAAC,GAAGF,QAAJ,EAAyB;AAChC,WAAO,IAAItB,gBAAJ,CAAqB,GAAGsB,QAAxB,CAAP;AACD;;AAlH2B,CAAvB","sourcesContent":["import { FlingGesture } from './flingGesture';\nimport { ForceTouchGesture } from './forceTouchGesture';\nimport { Gesture } from './gesture';\nimport {\n  ComposedGesture,\n  ExclusiveGesture,\n  SimultaneousGesture,\n} from './gestureComposition';\nimport { LongPressGesture } from './longPressGesture';\nimport { PanGesture } from './panGesture';\nimport { PinchGesture } from './pinchGesture';\nimport { RotationGesture } from './rotationGesture';\nimport { TapGesture } from './tapGesture';\nimport { NativeGesture } from './nativeGesture';\nimport { ManualGesture } from './manualGesture';\nimport { HoverGesture } from './hoverGesture';\n\n/**\n * `Gesture` is the object that allows you to create and compose gestures.\n *\n * ### Remarks\n * - Consider wrapping your gesture configurations with `useMemo`, as it will reduce the amount of work Gesture Handler has to do under the hood when updating gestures.\n *\n * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/gesture\n */\nexport const GestureObjects = {\n  /**\n   * A discrete gesture that recognizes one or many taps.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/tap-gesture\n   */\n  Tap: () => {\n    return new TapGesture();\n  },\n\n  /**\n   * A continuous gesture that can recognize a panning (dragging) gesture and track its movement.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture\n   */\n  Pan: () => {\n    return new PanGesture();\n  },\n\n  /**\n   * A continuous gesture that recognizes pinch gesture. It allows for tracking the distance between two fingers and use that information to scale or zoom your content.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pinch-gesture\n   */\n  Pinch: () => {\n    return new PinchGesture();\n  },\n\n  /**\n   * A continuous gesture that can recognize rotation and track its movement.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/rotation-gesture\n   */\n  Rotation: () => {\n    return new RotationGesture();\n  },\n\n  /**\n   * A discrete gesture that activates when the movement is sufficiently fast.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/fling-gesture\n   */\n  Fling: () => {\n    return new FlingGesture();\n  },\n\n  /**\n   * A discrete gesture that activates when the corresponding view is pressed for a sufficiently long time.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/long-press-gesture\n   */\n  LongPress: () => {\n    return new LongPressGesture();\n  },\n\n  /**\n   * #### iOS only\n   * A continuous gesture that recognizes force of a touch. It allows for tracking pressure of touch on some iOS devices.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/force-touch-gesture\n   */\n  ForceTouch: () => {\n    return new ForceTouchGesture();\n  },\n\n  /**\n   * A gesture that allows other touch handling components to participate in RNGH's gesture system.\n   * When used, the other component should be the direct child of a `GestureDetector`.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/native-gesture\n   */\n  Native: () => {\n    return new NativeGesture();\n  },\n\n  /**\n   * A plain gesture that has no specific activation criteria nor event data set.\n   * Its state has to be controlled manually using a state manager.\n   * It will not fail when all the pointers are lifted from the screen.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/manual-gesture\n   */\n  Manual: () => {\n    return new ManualGesture();\n  },\n\n  /**\n   * A continuous gesture that can recognize hovering above the view it's attached to.\n   * The hover effect may be activated by moving a mouse or a stylus over the view.\n   *\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/hover-gesture\n   */\n  Hover: () => {\n    return new HoverGesture();\n  },\n\n  /**\n   * Builds a composed gesture consisting of gestures provided as parameters.\n   * The first one that becomes active cancels the rest of gestures.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#race\n   */\n  Race: (...gestures: Gesture[]) => {\n    return new ComposedGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture that allows all base gestures to run simultaneously.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#simultaneous\n   */\n  Simultaneous(...gestures: Gesture[]) {\n    return new SimultaneousGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture where only one of the provided gestures can become active.\n   * Priority is decided through the order of gestures: the first one has higher priority\n   * than the second one, second one has higher priority than the third one, and so on.\n   * For example, to make a gesture that recognizes both single and double tap you need\n   * to call Exclusive(doubleTap, singleTap).\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#exclusive\n   */\n  Exclusive(...gestures: Gesture[]) {\n    return new ExclusiveGesture(...gestures);\n  },\n};\n"]}