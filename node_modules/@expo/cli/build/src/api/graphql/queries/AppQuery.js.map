{"version":3,"sources":["../../../../../src/api/graphql/queries/AppQuery.ts"],"sourcesContent":["import { print } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { AppByIdQuery } from '../../../graphql/generated';\nimport { graphqlClient, withErrorHandlingAsync } from '../client';\nimport { AppFragmentNode } from '../types/App';\n\nexport const AppQuery = {\n  async byIdAsync(projectId: string): Promise<AppByIdQuery['app']['byId']> {\n    const data = await withErrorHandlingAsync(\n      graphqlClient\n        .query<AppByIdQuery>(\n          gql`\n            query AppByIdQuery($appId: String!) {\n              app {\n                byId(appId: $appId) {\n                  id\n                  ...AppFragment\n                }\n              }\n            }\n            ${print(AppFragmentNode)}\n          `,\n          { appId: projectId },\n          {\n            additionalTypenames: ['App'],\n          }\n        )\n        .toPromise()\n    );\n    return data.app.byId;\n  },\n};\n"],"names":["AppQuery","byIdAsync","projectId","data","withErrorHandlingAsync","graphqlClient","query","gql","print","AppFragmentNode","appId","additionalTypenames","toPromise","app","byId"],"mappings":"AAAA;;;;+BAOaA,UAAQ;;aAARA,QAAQ;;;yBAPC,SAAS;;;;;;;8DACf,aAAa;;;;;;wBAGyB,WAAW;qBACjC,cAAc;;;;;;AAEvC,MAAMA,QAAQ,GAAG;IACtB,MAAMC,SAAS,EAACC,SAAiB,EAAwC;QACvE,MAAMC,IAAI,GAAG,MAAMC,IAAAA,OAAsB,uBAAA,EACvCC,OAAa,cAAA,CACVC,KAAK,CACJC,IAAAA,WAAG,EAAA,QAAA,CAAA,CAAC;;;;;;;;;YASF,EAAEC,IAAAA,QAAK,EAAA,MAAA,EAACC,IAAe,gBAAA,CAAC,CAAC;UAC3B,CAAC,EACD;YAAEC,KAAK,EAAER,SAAS;SAAE,EACpB;YACES,mBAAmB,EAAE;gBAAC,KAAK;aAAC;SAC7B,CACF,CACAC,SAAS,EAAE,CACf,AAAC;QACF,OAAOT,IAAI,CAACU,GAAG,CAACC,IAAI,CAAC;IACvB,CAAC;CACF,AAAC"}