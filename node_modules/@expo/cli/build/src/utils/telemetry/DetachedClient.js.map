{"version":3,"sources":["../../../../src/utils/telemetry/DetachedClient.ts"],"sourcesContent":["import { spawn } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport tempy from 'tempy';\n\nimport type { TelemetryClient, TelemetryRecord, TelemetryRecordWithDate } from './types';\nimport type { Actor } from '../../api/user/user';\n\nconst debug = require('debug')('expo:telemetry:detachedClient') as typeof console.log;\n\nexport type DetachedTelemetry = {\n  actor?: Actor;\n  records: TelemetryRecordWithDate[];\n};\n\nexport class DetachedClient implements TelemetryClient {\n  private actor: Actor | undefined;\n  private records: TelemetryRecordWithDate[] = [];\n\n  get isIdentified() {\n    return !!this.actor;\n  }\n\n  async identify(actor?: Actor) {\n    if (!actor) return;\n    debug('Actor received');\n    this.actor = actor;\n  }\n\n  async record(record: TelemetryRecord) {\n    debug('Event received: %s', record.event);\n    this.records.push({ ...record, originalTimestamp: new Date() });\n  }\n\n  async flush() {\n    if (!this.records.length) {\n      return debug('No records to flush, skipping...');\n    }\n\n    const file = tempy.file({ name: 'expo-telemetry.json' });\n    const data: DetachedTelemetry = { actor: this.actor, records: this.records };\n\n    this.records = [];\n\n    await fs.promises.mkdir(path.dirname(file), { recursive: true });\n    await fs.promises.writeFile(file, JSON.stringify(data));\n\n    const child = spawn(process.execPath, [require.resolve('./flushDetached'), file], {\n      detached: true,\n      windowsHide: true,\n      shell: false,\n      stdio: 'ignore',\n    });\n\n    child.unref();\n\n    debug('Detached flush started');\n  }\n}\n"],"names":["DetachedClient","debug","require","records","isIdentified","actor","identify","record","event","push","originalTimestamp","Date","flush","length","file","tempy","name","data","fs","promises","mkdir","path","dirname","recursive","writeFile","JSON","stringify","child","spawn","process","execPath","resolve","detached","windowsHide","shell","stdio","unref"],"mappings":"AAAA;;;;+BAeaA,gBAAc;;aAAdA,cAAc;;;yBAfL,eAAe;;;;;;;8DACtB,IAAI;;;;;;;8DACF,MAAM;;;;;;;8DACL,OAAO;;;;;;;;;;;AAKzB,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAAC,+BAA+B,CAAC,AAAsB,AAAC;AAO/E,MAAMF,cAAc;IAEzB,AAAQG,OAAO,GAA8B,EAAE,CAAC;QAE5CC,YAAY,GAAG;QACjB,OAAO,CAAC,CAAC,IAAI,CAACC,KAAK,CAAC;IACtB;UAEMC,QAAQ,CAACD,KAAa,EAAE;QAC5B,IAAI,CAACA,KAAK,EAAE,OAAO;QACnBJ,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACxB,IAAI,CAACI,KAAK,GAAGA,KAAK,CAAC;IACrB;UAEME,MAAM,CAACA,MAAuB,EAAE;QACpCN,KAAK,CAAC,oBAAoB,EAAEM,MAAM,CAACC,KAAK,CAAC,CAAC;QAC1C,IAAI,CAACL,OAAO,CAACM,IAAI,CAAC;YAAE,GAAGF,MAAM;YAAEG,iBAAiB,EAAE,IAAIC,IAAI,EAAE;SAAE,CAAC,CAAC;IAClE;UAEMC,KAAK,GAAG;QACZ,IAAI,CAAC,IAAI,CAACT,OAAO,CAACU,MAAM,EAAE;YACxB,OAAOZ,KAAK,CAAC,kCAAkC,CAAC,CAAC;QACnD,CAAC;QAED,MAAMa,IAAI,GAAGC,MAAK,EAAA,QAAA,CAACD,IAAI,CAAC;YAAEE,IAAI,EAAE,qBAAqB;SAAE,CAAC,AAAC;QACzD,MAAMC,IAAI,GAAsB;YAAEZ,KAAK,EAAE,IAAI,CAACA,KAAK;YAAEF,OAAO,EAAE,IAAI,CAACA,OAAO;SAAE,AAAC;QAE7E,IAAI,CAACA,OAAO,GAAG,EAAE,CAAC;QAElB,MAAMe,GAAE,EAAA,QAAA,CAACC,QAAQ,CAACC,KAAK,CAACC,KAAI,EAAA,QAAA,CAACC,OAAO,CAACR,IAAI,CAAC,EAAE;YAAES,SAAS,EAAE,IAAI;SAAE,CAAC,CAAC;QACjE,MAAML,GAAE,EAAA,QAAA,CAACC,QAAQ,CAACK,SAAS,CAACV,IAAI,EAAEW,IAAI,CAACC,SAAS,CAACT,IAAI,CAAC,CAAC,CAAC;QAExD,MAAMU,KAAK,GAAGC,IAAAA,aAAK,EAAA,MAAA,EAACC,OAAO,CAACC,QAAQ,EAAE;YAAC5B,OAAO,CAAC6B,OAAO,CAAC,iBAAiB,CAAC;YAAEjB,IAAI;SAAC,EAAE;YAChFkB,QAAQ,EAAE,IAAI;YACdC,WAAW,EAAE,IAAI;YACjBC,KAAK,EAAE,KAAK;YACZC,KAAK,EAAE,QAAQ;SAChB,CAAC,AAAC;QAEHR,KAAK,CAACS,KAAK,EAAE,CAAC;QAEdnC,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAClC;CACD"}