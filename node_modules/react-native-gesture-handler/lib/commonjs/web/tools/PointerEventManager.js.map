{"version":3,"sources":["PointerEventManager.ts"],"names":["POINTER_CAPTURE_EXCLUDE_LIST","Set","PointerTypes","Touch","Stylus","PointerEventManager","EventManager","constructor","view","Map","event","pointerType","x","clientX","y","clientY","adaptedEvent","mapEvent","EventTypes","DOWN","target","has","tagName","setPointerCapture","pointerId","markAsInBounds","trackedPointers","add","activePointersCounter","eventType","ADDITIONAL_POINTER_DOWN","onPointerAdd","onPointerDown","UP","releasePointerCapture","markAsOutOfBounds","delete","ADDITIONAL_POINTER_UP","onPointerRemove","onPointerUp","lastPosition","MOVE","hasPointerCapture","inBounds","pointerIndex","pointersInBounds","indexOf","ENTER","onPointerEnter","onPointerMove","LEAVE","onPointerLeave","onPointerOutOfBounds","CANCEL","onPointerCancel","clear","onPointerMoveOver","onPointerMoveOut","mouseButtonsMapper","set","MouseButton","LEFT","MIDDLE","RIGHT","BUTTON_4","BUTTON_5","Infinity","registerListeners","addEventListener","pointerDownCallback","pointerUpCallback","pointerMoveCallback","pointerCancelCallback","pointerEnterCallback","pointerLeaveCallback","lostPointerCaptureCallback","unregisterListeners","removeEventListener","offsetX","offsetY","PointerTypeMapping","get","PointerType","OTHER","button","time","timeStamp","resetManager"],"mappings":"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","sourcesContent":["import EventManager from './EventManager';\nimport { MouseButton } from '../../handlers/gestureHandlerCommon';\nimport { AdaptedEvent, EventTypes, Point } from '../interfaces';\nimport { PointerTypeMapping, isPointerInBounds } from '../utils';\nimport { PointerType } from '../../PointerType';\n\nconst POINTER_CAPTURE_EXCLUDE_LIST = new Set<string>(['SELECT', 'INPUT']);\nconst PointerTypes = {\n  Touch: 'touch',\n  Stylus: 'pen',\n};\n\nexport default class PointerEventManager extends EventManager<HTMLElement> {\n  private trackedPointers = new Set<number>();\n  private readonly mouseButtonsMapper = new Map<number, MouseButton>();\n  private lastPosition: Point;\n\n  constructor(view: HTMLElement) {\n    super(view);\n\n    this.mouseButtonsMapper.set(0, MouseButton.LEFT);\n    this.mouseButtonsMapper.set(1, MouseButton.MIDDLE);\n    this.mouseButtonsMapper.set(2, MouseButton.RIGHT);\n    this.mouseButtonsMapper.set(3, MouseButton.BUTTON_4);\n    this.mouseButtonsMapper.set(4, MouseButton.BUTTON_5);\n\n    this.lastPosition = {\n      x: -Infinity,\n      y: -Infinity,\n    };\n  }\n\n  private pointerDownCallback = (event: PointerEvent) => {\n    if (event.pointerType === PointerTypes.Touch) {\n      return;\n    }\n    if (!isPointerInBounds(this.view, { x: event.clientX, y: event.clientY })) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n    const target = event.target as HTMLElement;\n\n    if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n      target.setPointerCapture(adaptedEvent.pointerId);\n    }\n\n    this.markAsInBounds(adaptedEvent.pointerId);\n    this.trackedPointers.add(adaptedEvent.pointerId);\n\n    if (++this.activePointersCounter > 1) {\n      adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n      this.onPointerAdd(adaptedEvent);\n    } else {\n      this.onPointerDown(adaptedEvent);\n    }\n  };\n\n  private pointerUpCallback = (event: PointerEvent) => {\n    if (event.pointerType === PointerTypes.Touch) {\n      return;\n    }\n\n    // When we call reset on gesture handlers, it also resets their event managers\n    // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n    // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n    // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n    if (this.activePointersCounter === 0) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.UP);\n    const target = event.target as HTMLElement;\n\n    if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n      target.releasePointerCapture(adaptedEvent.pointerId);\n    }\n\n    this.markAsOutOfBounds(adaptedEvent.pointerId);\n    this.trackedPointers.delete(adaptedEvent.pointerId);\n\n    if (--this.activePointersCounter > 0) {\n      adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n      this.onPointerRemove(adaptedEvent);\n    } else {\n      this.onPointerUp(adaptedEvent);\n    }\n  };\n\n  private pointerMoveCallback = (event: PointerEvent) => {\n    if (event.pointerType === PointerTypes.Touch) {\n      return;\n    }\n\n    // Stylus triggers `pointermove` event when it detects changes in pressure. Since it is very sensitive to those changes,\n    // it constantly sends events, even though there was no change in position. To fix that we check whether\n    // pointer has actually moved and if not, we do not send event.\n    if (\n      event.pointerType === PointerTypes.Stylus &&\n      event.x === this.lastPosition.x &&\n      event.y === this.lastPosition.y\n    ) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n    const target = event.target as HTMLElement;\n\n    // You may be wondering why are we setting pointer capture here, when we\n    // already set it in `pointerdown` handler. Well, that's a great question,\n    // for which I don't have an answer. Specification (https://www.w3.org/TR/pointerevents2/#dom-element-setpointercapture)\n    // says that the requirement for `setPointerCapture` to work is that pointer\n    // must be in 'active buttons state`, otherwise it will fail silently, which\n    // is lovely. Obviously, when `pointerdown` is fired, one of the buttons\n    // (when using mouse) is pressed, but that doesn't mean that `setPointerCapture`\n    // will succeed, for some reason. Since it fails silently, we don't actually know\n    // if it worked or not (there's `gotpointercapture` event, but the complexity of\n    // incorporating it here seems stupid), so we just call it again here, every time\n    // pointer moves until it succeeds.\n    // God, I do love web development.\n    if (\n      !target.hasPointerCapture(event.pointerId) &&\n      !POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)\n    ) {\n      target.setPointerCapture(event.pointerId);\n    }\n\n    const inBounds: boolean = isPointerInBounds(this.view, {\n      x: adaptedEvent.x,\n      y: adaptedEvent.y,\n    });\n\n    const pointerIndex: number = this.pointersInBounds.indexOf(\n      adaptedEvent.pointerId\n    );\n\n    if (inBounds) {\n      if (pointerIndex < 0) {\n        adaptedEvent.eventType = EventTypes.ENTER;\n        this.onPointerEnter(adaptedEvent);\n        this.markAsInBounds(adaptedEvent.pointerId);\n      } else {\n        this.onPointerMove(adaptedEvent);\n      }\n    } else {\n      if (pointerIndex >= 0) {\n        adaptedEvent.eventType = EventTypes.LEAVE;\n        this.onPointerLeave(adaptedEvent);\n        this.markAsOutOfBounds(adaptedEvent.pointerId);\n      } else {\n        this.onPointerOutOfBounds(adaptedEvent);\n      }\n    }\n\n    this.lastPosition.x = event.x;\n    this.lastPosition.y = event.y;\n  };\n\n  private pointerCancelCallback = (event: PointerEvent) => {\n    if (event.pointerType === PointerTypes.Touch) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.CANCEL);\n\n    this.onPointerCancel(adaptedEvent);\n    this.markAsOutOfBounds(adaptedEvent.pointerId);\n    this.activePointersCounter = 0;\n    this.trackedPointers.clear();\n  };\n\n  private pointerEnterCallback = (event: PointerEvent) => {\n    if (event.pointerType === PointerTypes.Touch) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.ENTER);\n\n    this.onPointerMoveOver(adaptedEvent);\n  };\n\n  private pointerLeaveCallback = (event: PointerEvent) => {\n    if (event.pointerType === PointerTypes.Touch) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.LEAVE);\n\n    this.onPointerMoveOut(adaptedEvent);\n  };\n\n  private lostPointerCaptureCallback = (event: PointerEvent) => {\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.CANCEL);\n\n    if (this.trackedPointers.has(adaptedEvent.pointerId)) {\n      // in some cases the `pointerup` event is not fired, but `lostpointercapture` is\n      // we simulate the `pointercancel` event here to make sure the gesture handler stops tracking it\n      this.onPointerCancel(adaptedEvent);\n\n      this.activePointersCounter = 0;\n      this.trackedPointers.clear();\n    }\n  };\n\n  public registerListeners(): void {\n    this.view.addEventListener('pointerdown', this.pointerDownCallback);\n    this.view.addEventListener('pointerup', this.pointerUpCallback);\n    this.view.addEventListener('pointermove', this.pointerMoveCallback);\n    this.view.addEventListener('pointercancel', this.pointerCancelCallback);\n\n    // onPointerEnter and onPointerLeave are triggered by a custom logic responsible for\n    // handling shouldCancelWhenOutside flag, and are unreliable unless the pointer is down.\n    // We therefore use pointerenter and pointerleave events to handle the hover gesture,\n    // mapping them to onPointerMoveOver and onPointerMoveOut respectively.\n    this.view.addEventListener('pointerenter', this.pointerEnterCallback);\n    this.view.addEventListener('pointerleave', this.pointerLeaveCallback);\n    this.view.addEventListener(\n      'lostpointercapture',\n      this.lostPointerCaptureCallback\n    );\n  }\n\n  public unregisterListeners(): void {\n    this.view.removeEventListener('pointerdown', this.pointerDownCallback);\n    this.view.removeEventListener('pointerup', this.pointerUpCallback);\n    this.view.removeEventListener('pointermove', this.pointerMoveCallback);\n    this.view.removeEventListener('pointercancel', this.pointerCancelCallback);\n    this.view.removeEventListener('pointerenter', this.pointerEnterCallback);\n    this.view.removeEventListener('pointerleave', this.pointerLeaveCallback);\n    this.view.removeEventListener(\n      'lostpointercapture',\n      this.lostPointerCaptureCallback\n    );\n  }\n\n  protected mapEvent(event: PointerEvent, eventType: EventTypes): AdaptedEvent {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: event.offsetX,\n      offsetY: event.offsetY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType:\n        PointerTypeMapping.get(event.pointerType) ?? PointerType.OTHER,\n      button: this.mouseButtonsMapper.get(event.button),\n      time: event.timeStamp,\n    };\n  }\n\n  public resetManager(): void {\n    super.resetManager();\n    this.trackedPointers.clear();\n  }\n}\n"]}