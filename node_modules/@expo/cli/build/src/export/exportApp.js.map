{"version":3,"sources":["../../../src/export/exportApp.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport type { Platform } from '@expo/config';\nimport assert from 'assert';\nimport chalk from 'chalk';\nimport path from 'path';\n\nimport { createMetadataJson } from './createMetadataJson';\nimport { exportAssetsAsync } from './exportAssets';\nimport { assertEngineMismatchAsync, isEnableHermesManaged } from './exportHermes';\nimport { exportFromServerAsync } from './exportStaticAsync';\nimport { getVirtualFaviconAssetsAsync } from './favicon';\nimport { getPublicExpoManifestAsync } from './getPublicExpoManifest';\nimport { copyPublicFolderAsync } from './publicFolder';\nimport { Options } from './resolveOptions';\nimport {\n  ExportAssetMap,\n  BundleOutput,\n  getFilesFromSerialAssets,\n  persistMetroFilesAsync,\n} from './saveAssets';\nimport { createAssetMap, createSourceMapDebugHtml } from './writeContents';\nimport * as Log from '../log';\nimport { WebSupportProjectPrerequisite } from '../start/doctor/web/WebSupportProjectPrerequisite';\nimport { DevServerManager } from '../start/server/DevServerManager';\nimport { MetroBundlerDevServer } from '../start/server/metro/MetroBundlerDevServer';\nimport { getRouterDirectoryModuleIdWithManifest } from '../start/server/metro/router';\nimport { serializeHtmlWithAssets } from '../start/server/metro/serializeHtml';\nimport { getEntryWithServerRoot } from '../start/server/middleware/ManifestMiddleware';\nimport { getBaseUrlFromExpoConfig } from '../start/server/middleware/metroOptions';\nimport { createTemplateHtmlFromExpoConfigAsync } from '../start/server/webTemplate';\nimport { env } from '../utils/env';\nimport { setNodeEnv } from '../utils/nodeEnv';\n\nexport async function exportAppAsync(\n  projectRoot: string,\n  {\n    platforms,\n    outputDir,\n    clear,\n    dev,\n    dumpAssetmap,\n    sourceMaps,\n    minify,\n    bytecode,\n    maxWorkers,\n  }: Pick<\n    Options,\n    | 'dumpAssetmap'\n    | 'sourceMaps'\n    | 'dev'\n    | 'clear'\n    | 'outputDir'\n    | 'platforms'\n    | 'minify'\n    | 'bytecode'\n    | 'maxWorkers'\n  >\n): Promise<void> {\n  setNodeEnv(dev ? 'development' : 'production');\n  require('@expo/env').load(projectRoot);\n\n  const projectConfig = getConfig(projectRoot);\n  const exp = await getPublicExpoManifestAsync(projectRoot, {\n    // Web doesn't require validation.\n    skipValidation: platforms.length === 1 && platforms[0] === 'web',\n  });\n\n  if (platforms.includes('web')) {\n    await new WebSupportProjectPrerequisite(projectRoot).assertAsync();\n  }\n\n  const useServerRendering = ['static', 'server'].includes(exp.web?.output ?? '');\n  const baseUrl = getBaseUrlFromExpoConfig(exp);\n\n  if (!bytecode && (platforms.includes('ios') || platforms.includes('android'))) {\n    Log.warn(\n      `Bytecode makes the app startup faster, disabling bytecode is highly discouraged and should only be used for debugging purposes.`\n    );\n  }\n\n  // Print out logs\n  if (baseUrl) {\n    Log.log();\n    Log.log(chalk.gray`Using (experimental) base path: ${baseUrl}`);\n    // Warn if not using an absolute path.\n    if (!baseUrl.startsWith('/')) {\n      Log.log(\n        chalk.yellow`  Base path does not start with a slash. Requests will not be absolute.`\n      );\n    }\n  }\n\n  const mode = dev ? 'development' : 'production';\n  const publicPath = path.resolve(projectRoot, env.EXPO_PUBLIC_FOLDER);\n  const outputPath = path.resolve(projectRoot, outputDir);\n\n  // Write the JS bundles to disk, and get the bundle file names (this could change with async chunk loading support).\n\n  const files: ExportAssetMap = new Map();\n\n  const devServerManager = await DevServerManager.startMetroAsync(projectRoot, {\n    minify,\n    mode,\n    port: 8081,\n    isExporting: true,\n    location: {},\n    resetDevServer: clear,\n    maxWorkers,\n  });\n\n  const devServer = devServerManager.getDefaultDevServer();\n  assert(devServer instanceof MetroBundlerDevServer);\n\n  const bundles: Partial<Record<Platform, BundleOutput>> = {};\n\n  const spaPlatforms = useServerRendering\n    ? platforms.filter((platform) => platform !== 'web')\n    : platforms;\n\n  try {\n    // NOTE(kitten): The public folder is currently always copied, regardless of targetDomain\n    // split. Hence, there's another separate `copyPublicFolderAsync` call below for `web`\n    await copyPublicFolderAsync(publicPath, outputPath);\n\n    // Can be empty during web-only SSG.\n    if (spaPlatforms.length) {\n      await Promise.all(\n        spaPlatforms.map(async (platform) => {\n          // Assert early so the user doesn't have to wait until bundling is complete to find out that\n          // Hermes won't be available.\n          const isHermes = isEnableHermesManaged(exp, platform);\n          if (isHermes) {\n            await assertEngineMismatchAsync(projectRoot, exp, platform);\n          }\n\n          // Run metro bundler and create the JS bundles/source maps.\n          const bundle = await devServer.legacySinglePageExportBundleAsync({\n            platform,\n            splitChunks: !env.EXPO_NO_BUNDLE_SPLITTING && platform === 'web',\n            mainModuleName: getEntryWithServerRoot(projectRoot, {\n              platform,\n              pkg: projectConfig.pkg,\n            }),\n            mode: dev ? 'development' : 'production',\n            engine: isHermes ? 'hermes' : undefined,\n            serializerIncludeMaps: sourceMaps,\n            bytecode: bytecode && isHermes,\n            reactCompiler: !!exp.experiments?.reactCompiler,\n          });\n\n          bundles[platform] = bundle;\n\n          getFilesFromSerialAssets(bundle.artifacts, {\n            includeSourceMaps: sourceMaps,\n            files,\n          });\n\n          if (platform === 'web') {\n            // TODO: Unify with exportStaticAsync\n            // TODO: Maybe move to the serializer.\n            let html = await serializeHtmlWithAssets({\n              isExporting: true,\n              resources: bundle.artifacts,\n              template: await createTemplateHtmlFromExpoConfigAsync(projectRoot, {\n                scripts: [],\n                cssLinks: [],\n                exp: projectConfig.exp,\n              }),\n              baseUrl,\n            });\n\n            // Add the favicon assets to the HTML.\n            const modifyHtml = await getVirtualFaviconAssetsAsync(projectRoot, {\n              outputDir,\n              baseUrl,\n              files,\n              exp: projectConfig.exp,\n            });\n            if (modifyHtml) {\n              html = modifyHtml(html);\n            }\n\n            // Generate SPA-styled HTML file.\n            // If web exists, then write the template HTML file.\n            files.set('index.html', {\n              contents: html,\n              targetDomain: 'client',\n            });\n          }\n        })\n      );\n\n      // TODO: Use same asset system across platforms again.\n      const { assets, embeddedHashSet } = await exportAssetsAsync(projectRoot, {\n        files,\n        exp,\n        outputDir: outputPath,\n        bundles,\n        baseUrl,\n      });\n\n      if (dumpAssetmap) {\n        Log.log('Creating asset map');\n        files.set('assetmap.json', { contents: JSON.stringify(createAssetMap({ assets })) });\n      }\n\n      const fileNames = Object.fromEntries(\n        Object.entries(bundles).map(([platform, bundle]) => [\n          platform,\n          bundle.artifacts.filter((asset) => asset.type === 'js').map((asset) => asset.filename),\n        ])\n      );\n\n      // build source maps\n      if (sourceMaps) {\n        Log.log('Preparing additional debugging files');\n        // If we output source maps, then add a debug HTML file which the user can open in\n        // the web browser to inspect the output like web.\n        files.set('debug.html', {\n          contents: createSourceMapDebugHtml({\n            fileNames: Object.values(fileNames).flat(),\n          }),\n        });\n      }\n\n      // Generate a `metadata.json` for EAS Update.\n      const contents = createMetadataJson({\n        bundles,\n        fileNames,\n        embeddedHashSet,\n      });\n      files.set('metadata.json', { contents: JSON.stringify(contents) });\n    }\n\n    // Additional web-only steps...\n\n    if (platforms.includes('web') && useServerRendering) {\n      const exportServer = exp.web?.output === 'server';\n\n      if (exportServer) {\n        // TODO: Remove when this is abstracted into the files map\n        await copyPublicFolderAsync(publicPath, path.resolve(outputPath, 'client'));\n      }\n\n      await exportFromServerAsync(projectRoot, devServer, {\n        mode,\n        files,\n        clear: !!clear,\n        outputDir: outputPath,\n        minify,\n        baseUrl,\n        includeSourceMaps: sourceMaps,\n        routerRoot: getRouterDirectoryModuleIdWithManifest(projectRoot, exp),\n        reactCompiler: !!exp.experiments?.reactCompiler,\n        exportServer,\n        maxWorkers,\n        isExporting: true,\n        exp: projectConfig.exp,\n      });\n    }\n  } finally {\n    await devServerManager.stopAsync();\n  }\n\n  // Write all files at the end for unified logging.\n  await persistMetroFilesAsync(files, outputPath);\n}\n"],"names":["exportAppAsync","projectRoot","platforms","outputDir","clear","dev","dumpAssetmap","sourceMaps","minify","bytecode","maxWorkers","exp","setNodeEnv","require","load","projectConfig","getConfig","getPublicExpoManifestAsync","skipValidation","length","includes","WebSupportProjectPrerequisite","assertAsync","useServerRendering","web","output","baseUrl","getBaseUrlFromExpoConfig","Log","warn","log","chalk","gray","startsWith","yellow","mode","publicPath","path","resolve","env","EXPO_PUBLIC_FOLDER","outputPath","files","Map","devServerManager","DevServerManager","startMetroAsync","port","isExporting","location","resetDevServer","devServer","getDefaultDevServer","assert","MetroBundlerDevServer","bundles","spaPlatforms","filter","platform","copyPublicFolderAsync","Promise","all","map","isHermes","isEnableHermesManaged","assertEngineMismatchAsync","bundle","legacySinglePageExportBundleAsync","splitChunks","EXPO_NO_BUNDLE_SPLITTING","mainModuleName","getEntryWithServerRoot","pkg","engine","undefined","serializerIncludeMaps","reactCompiler","experiments","getFilesFromSerialAssets","artifacts","includeSourceMaps","html","serializeHtmlWithAssets","resources","template","createTemplateHtmlFromExpoConfigAsync","scripts","cssLinks","modifyHtml","getVirtualFaviconAssetsAsync","set","contents","targetDomain","assets","embeddedHashSet","exportAssetsAsync","JSON","stringify","createAssetMap","fileNames","Object","fromEntries","entries","asset","type","filename","createSourceMapDebugHtml","values","flat","createMetadataJson","exportServer","exportFromServerAsync","routerRoot","getRouterDirectoryModuleIdWithManifest","stopAsync","persistMetroFilesAsync"],"mappings":"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"}