{"version":3,"names":["Animations","AnimationsData","TransitionType","convertAnimationObjectToKeyframes","LinearTransition","SequencedTransition","FadingTransition","insertWebAnimation","addPxToTranslate","existingTransform","newTransform","map","transformProp","newTransformProp","key","value","Object","entries","includes","addExistingTransform","newAnimationData","keyframeStepProperties","values","style","transform","Array","prototype","unshift","apply","createAnimationWithExistingTransform","animationName","layoutTransition","structuredClone","keyframeName","generateNextCustomKeyframeName","name","keyframe","customKeyframeCounter","TransitionGenerator","transitionType","transitionData","transitionKeyframeName","transitionObject","LINEAR","SEQUENCED","FADING","transitionKeyframe"],"sources":["createAnimation.ts"],"sourcesContent":["'use strict';\n\nimport { Animations, AnimationsData, TransitionType } from './config';\nimport { convertAnimationObjectToKeyframes } from './animationParser';\nimport type {\n  AnimationData,\n  ReanimatedWebTransformProperties,\n  TransitionData,\n} from './animationParser';\nimport type { TransformsStyle } from 'react-native';\nimport { LinearTransition } from './transition/Linear.web';\nimport { SequencedTransition } from './transition/Sequenced.web';\nimport { FadingTransition } from './transition/Fading.web';\nimport { insertWebAnimation } from './domUtils';\n\n// Translate values are passed as numbers. However, if `translate` property receives number, it will not automatically\n// convert it to `px`. Therefore if we want to keep existing transform we have to add 'px' suffix to each of translate values\n// that are present inside transform.\nfunction addPxToTranslate(\n  existingTransform: NonNullable<TransformsStyle['transform']>\n) {\n  type RNTransformProp = (typeof existingTransform)[number];\n\n  // @ts-ignore `existingTransform` cannot be string because in that case\n  // we throw error in `extractTransformFromStyle`\n  const newTransform = existingTransform.map(\n    (transformProp: RNTransformProp) => {\n      const newTransformProp: ReanimatedWebTransformProperties = {};\n      for (const [key, value] of Object.entries(transformProp)) {\n        if (key.includes('translate')) {\n          // @ts-ignore After many trials we decided to ignore this error - it says that we cannot use 'key' to index this object.\n          // Sadly it doesn't go away after using cast `key as keyof TransformProperties`.\n          newTransformProp[key] = `${value}px`;\n        } else {\n          // @ts-ignore same as above.\n          newTransformProp[key] = value;\n        }\n      }\n      return newTransformProp;\n    }\n  );\n\n  return newTransform;\n}\n\n// In order to keep existing transform throughout animation, we have to add it to each of keyframe step.\nfunction addExistingTransform(\n  newAnimationData: AnimationData,\n  newTransform: ReanimatedWebTransformProperties[]\n) {\n  for (const keyframeStepProperties of Object.values(newAnimationData.style)) {\n    if (!keyframeStepProperties.transform) {\n      // If transform doesn't exist, we add only transform that already exists\n      keyframeStepProperties.transform = newTransform;\n    } else {\n      // We insert existing transformations before ours.\n      Array.prototype.unshift.apply(\n        keyframeStepProperties.transform,\n        newTransform\n      );\n    }\n  }\n}\n\n/**\n *  Modifies default animation by preserving transformations that given element already contains.\n *\n * @param animationName - Name of the animation to be modified (e.g. `FadeIn`).\n * @param existingTransform - Transform values that element already contains.\n * @returns Animation parsed to keyframe string.\n */\nexport function createAnimationWithExistingTransform(\n  animationName: string,\n  existingTransform: NonNullable<TransformsStyle['transform']>,\n  layoutTransition?: AnimationData\n) {\n  let newAnimationData;\n\n  if (layoutTransition) {\n    newAnimationData = layoutTransition;\n  } else {\n    if (!(animationName in Animations)) {\n      return '';\n    }\n    newAnimationData = structuredClone(AnimationsData[animationName]);\n  }\n\n  const keyframeName = generateNextCustomKeyframeName();\n\n  newAnimationData.name = keyframeName;\n\n  const newTransform = addPxToTranslate(existingTransform);\n\n  addExistingTransform(newAnimationData, newTransform);\n\n  const keyframe = convertAnimationObjectToKeyframes(newAnimationData);\n\n  insertWebAnimation(keyframeName, keyframe);\n\n  return keyframeName;\n}\n\nlet customKeyframeCounter = 0;\n\nfunction generateNextCustomKeyframeName() {\n  return `REA${customKeyframeCounter++}`;\n}\n\n/**\n * Creates transition of given type, appends it to stylesheet and returns keyframe name.\n *\n * @param transitionType - Type of transition (e.g. LINEAR).\n * @param transitionData - Object containing data for transforms (translateX, scaleX,...).\n * @returns Keyframe name that represents transition.\n */\nexport function TransitionGenerator(\n  transitionType: TransitionType,\n  transitionData: TransitionData,\n  existingTransform: TransformsStyle['transform'] | undefined\n) {\n  const transitionKeyframeName = generateNextCustomKeyframeName();\n  let transitionObject;\n\n  switch (transitionType) {\n    case TransitionType.LINEAR:\n      transitionObject = LinearTransition(\n        transitionKeyframeName,\n        transitionData\n      );\n      break;\n    case TransitionType.SEQUENCED:\n      transitionObject = SequencedTransition(\n        transitionKeyframeName,\n        transitionData\n      );\n      break;\n    case TransitionType.FADING:\n      transitionObject = FadingTransition(\n        transitionKeyframeName,\n        transitionData\n      );\n      break;\n  }\n\n  if (existingTransform) {\n    return createAnimationWithExistingTransform(\n      '',\n      existingTransform,\n      transitionObject\n    );\n  }\n\n  const transitionKeyframe =\n    convertAnimationObjectToKeyframes(transitionObject);\n\n  insertWebAnimation(transitionKeyframeName, transitionKeyframe);\n\n  return transitionKeyframeName;\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,UAAU,EAAEC,cAAc,EAAEC,cAAc,QAAQ,UAAU;AACrE,SAASC,iCAAiC,QAAQ,mBAAmB;AAOrE,SAASC,gBAAgB,QAAQ,yBAAyB;AAC1D,SAASC,mBAAmB,QAAQ,4BAA4B;AAChE,SAASC,gBAAgB,QAAQ,yBAAyB;AAC1D,SAASC,kBAAkB,QAAQ,YAAY;;AAE/C;AACA;AACA;AACA,SAASC,gBAAgBA,CACvBC,iBAA4D,EAC5D;EAGA;EACA;EACA,MAAMC,YAAY,GAAGD,iBAAiB,CAACE,GAAG,CACvCC,aAA8B,IAAK;IAClC,MAAMC,gBAAkD,GAAG,CAAC,CAAC;IAC7D,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACL,aAAa,CAAC,EAAE;MACxD,IAAIE,GAAG,CAACI,QAAQ,CAAC,WAAW,CAAC,EAAE;QAC7B;QACA;QACAL,gBAAgB,CAACC,GAAG,CAAC,GAAI,GAAEC,KAAM,IAAG;MACtC,CAAC,MAAM;QACL;QACAF,gBAAgB,CAACC,GAAG,CAAC,GAAGC,KAAK;MAC/B;IACF;IACA,OAAOF,gBAAgB;EACzB,CACF,CAAC;EAED,OAAOH,YAAY;AACrB;;AAEA;AACA,SAASS,oBAAoBA,CAC3BC,gBAA+B,EAC/BV,YAAgD,EAChD;EACA,KAAK,MAAMW,sBAAsB,IAAIL,MAAM,CAACM,MAAM,CAACF,gBAAgB,CAACG,KAAK,CAAC,EAAE;IAC1E,IAAI,CAACF,sBAAsB,CAACG,SAAS,EAAE;MACrC;MACAH,sBAAsB,CAACG,SAAS,GAAGd,YAAY;IACjD,CAAC,MAAM;MACL;MACAe,KAAK,CAACC,SAAS,CAACC,OAAO,CAACC,KAAK,CAC3BP,sBAAsB,CAACG,SAAS,EAChCd,YACF,CAAC;IACH;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASmB,oCAAoCA,CAClDC,aAAqB,EACrBrB,iBAA4D,EAC5DsB,gBAAgC,EAChC;EACA,IAAIX,gBAAgB;EAEpB,IAAIW,gBAAgB,EAAE;IACpBX,gBAAgB,GAAGW,gBAAgB;EACrC,CAAC,MAAM;IACL,IAAI,EAAED,aAAa,IAAI9B,UAAU,CAAC,EAAE;MAClC,OAAO,EAAE;IACX;IACAoB,gBAAgB,GAAGY,eAAe,CAAC/B,cAAc,CAAC6B,aAAa,CAAC,CAAC;EACnE;EAEA,MAAMG,YAAY,GAAGC,8BAA8B,CAAC,CAAC;EAErDd,gBAAgB,CAACe,IAAI,GAAGF,YAAY;EAEpC,MAAMvB,YAAY,GAAGF,gBAAgB,CAACC,iBAAiB,CAAC;EAExDU,oBAAoB,CAACC,gBAAgB,EAAEV,YAAY,CAAC;EAEpD,MAAM0B,QAAQ,GAAGjC,iCAAiC,CAACiB,gBAAgB,CAAC;EAEpEb,kBAAkB,CAAC0B,YAAY,EAAEG,QAAQ,CAAC;EAE1C,OAAOH,YAAY;AACrB;AAEA,IAAII,qBAAqB,GAAG,CAAC;AAE7B,SAASH,8BAA8BA,CAAA,EAAG;EACxC,OAAQ,MAAKG,qBAAqB,EAAG,EAAC;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CACjCC,cAA8B,EAC9BC,cAA8B,EAC9B/B,iBAA2D,EAC3D;EACA,MAAMgC,sBAAsB,GAAGP,8BAA8B,CAAC,CAAC;EAC/D,IAAIQ,gBAAgB;EAEpB,QAAQH,cAAc;IACpB,KAAKrC,cAAc,CAACyC,MAAM;MACxBD,gBAAgB,GAAGtC,gBAAgB,CACjCqC,sBAAsB,EACtBD,cACF,CAAC;MACD;IACF,KAAKtC,cAAc,CAAC0C,SAAS;MAC3BF,gBAAgB,GAAGrC,mBAAmB,CACpCoC,sBAAsB,EACtBD,cACF,CAAC;MACD;IACF,KAAKtC,cAAc,CAAC2C,MAAM;MACxBH,gBAAgB,GAAGpC,gBAAgB,CACjCmC,sBAAsB,EACtBD,cACF,CAAC;MACD;EACJ;EAEA,IAAI/B,iBAAiB,EAAE;IACrB,OAAOoB,oCAAoC,CACzC,EAAE,EACFpB,iBAAiB,EACjBiC,gBACF,CAAC;EACH;EAEA,MAAMI,kBAAkB,GACtB3C,iCAAiC,CAACuC,gBAAgB,CAAC;EAErDnC,kBAAkB,CAACkC,sBAAsB,EAAEK,kBAAkB,CAAC;EAE9D,OAAOL,sBAAsB;AAC/B","ignoreList":[]}