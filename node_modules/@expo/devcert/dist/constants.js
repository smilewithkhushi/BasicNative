"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rootCACertPath = exports.rootCAKeyPath = exports.rootCADir = exports.caSelfSignConfig = exports.opensslDatabaseFilePath = exports.opensslSerialFilePath = exports.caVersionFile = exports.pathForDomain = exports.domainsDir = exports.configPath = exports.configDir = exports.isWindows = exports.isLinux = exports.isMac = exports.VALID_DOMAIN = exports.VALID_IP = void 0;
exports.withDomainSigningRequestConfig = withDomainSigningRequestConfig;
exports.withDomainCertificateConfig = withDomainCertificateConfig;
exports.getLegacyConfigDir = getLegacyConfigDir;
exports.ensureConfigDirs = ensureConfigDirs;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const fs_1 = require("fs");
const mkdirp_1 = require("mkdirp");
const lodash_1 = require("lodash");
const applicationConfigPath = require("application-config-path");
const eol_1 = tslib_1.__importDefault(require("eol"));
const utils_1 = require("./utils");
exports.VALID_IP = /(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}/;
exports.VALID_DOMAIN = /^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.?)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$/i;
// Platform shortcuts
exports.isMac = process.platform === 'darwin';
exports.isLinux = process.platform === 'linux';
exports.isWindows = process.platform === 'win32';
// Common paths
exports.configDir = applicationConfigPath('devcert');
exports.configPath = path_1.default.join.bind(path_1.default, exports.configDir);
exports.domainsDir = (0, exports.configPath)('domains');
exports.pathForDomain = path_1.default.join.bind(path_1.default, exports.domainsDir);
exports.caVersionFile = (0, exports.configPath)('devcert-ca-version');
exports.opensslSerialFilePath = (0, exports.configPath)('certificate-authority', 'serial');
exports.opensslDatabaseFilePath = (0, exports.configPath)('certificate-authority', 'index.txt');
exports.caSelfSignConfig = path_1.default.join(__dirname, '../openssl-configurations/certificate-authority-self-signing.conf');
function withDomainSigningRequestConfig(domain, cb) {
    let tmpFile = (0, utils_1.mktmp)();
    let source = (0, fs_1.readFileSync)(path_1.default.join(__dirname, '../openssl-configurations/domain-certificate-signing-requests.conf'), 'utf-8');
    let template = (0, lodash_1.template)(source);
    let result = template({ domain });
    (0, fs_1.writeFileSync)(tmpFile, eol_1.default.auto(result));
    cb(tmpFile);
    (0, fs_1.unlinkSync)(tmpFile);
}
function withDomainCertificateConfig(domain, cb) {
    let tmpFile = (0, utils_1.mktmp)();
    let source = (0, fs_1.readFileSync)(path_1.default.join(__dirname, '../openssl-configurations/domain-certificates.conf'), 'utf-8');
    let template = (0, lodash_1.template)(source);
    let result = template({
        domain,
        serialFile: exports.opensslSerialFilePath,
        databaseFile: exports.opensslDatabaseFilePath,
        domainDir: (0, exports.pathForDomain)(domain)
    });
    (0, fs_1.writeFileSync)(tmpFile, eol_1.default.auto(result));
    cb(tmpFile);
    (0, fs_1.unlinkSync)(tmpFile);
}
// confTemplate = confTemplate.replace(/DATABASE_PATH/, configPath('index.txt').replace(/\\/g, '\\\\'));
// confTemplate = confTemplate.replace(/SERIAL_PATH/, configPath('serial').replace(/\\/g, '\\\\'));
// confTemplate = eol.auto(confTemplate);
exports.rootCADir = (0, exports.configPath)('certificate-authority');
exports.rootCAKeyPath = (0, exports.configPath)('certificate-authority', 'private-key.key');
exports.rootCACertPath = (0, exports.configPath)('certificate-authority', 'certificate.cert');
// Exposed for uninstallation purposes.
function getLegacyConfigDir() {
    if (exports.isWindows && process.env.LOCALAPPDATA) {
        return path_1.default.join(process.env.LOCALAPPDATA, 'devcert', 'config');
    }
    else {
        let uid = process.getuid && process.getuid();
        let userHome = (exports.isLinux && uid === 0) ? path_1.default.resolve('/usr/local/share') : require('os').homedir();
        return path_1.default.join(userHome, '.config', 'devcert');
    }
}
function ensureConfigDirs() {
    (0, mkdirp_1.sync)(exports.configDir);
    (0, mkdirp_1.sync)(exports.domainsDir);
    (0, mkdirp_1.sync)(exports.rootCADir);
}
ensureConfigDirs();
//# sourceMappingURL=data:application/json;base64,