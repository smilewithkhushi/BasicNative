{"version":3,"sources":["../../../src/prebuild/configureProjectAsync.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config';\nimport { compileModsAsync, ModPlatform } from '@expo/config-plugins';\nimport { getPrebuildConfigAsync } from '@expo/prebuild-config';\n\nimport { logConfig } from '../config/configAsync';\nimport * as Log from '../log';\nimport { env } from '../utils/env';\nimport {\n  getOrPromptForBundleIdentifier,\n  getOrPromptForPackage,\n} from '../utils/getOrPromptApplicationId';\n\nexport async function configureProjectAsync(\n  projectRoot: string,\n  {\n    platforms,\n    exp,\n    templateChecksum,\n  }: {\n    platforms: ModPlatform[];\n    exp?: ExpoConfig;\n    templateChecksum?: string;\n  }\n): Promise<ExpoConfig> {\n  let bundleIdentifier: string | undefined;\n  if (platforms.includes('ios')) {\n    // Check bundle ID before reading the config because it may mutate the config if the user is prompted to define it.\n    bundleIdentifier = await getOrPromptForBundleIdentifier(projectRoot, exp);\n  }\n  let packageName: string | undefined;\n  if (platforms.includes('android')) {\n    // Check package before reading the config because it may mutate the config if the user is prompted to define it.\n    packageName = await getOrPromptForPackage(projectRoot, exp);\n  }\n\n  let { exp: config } = await getPrebuildConfigAsync(projectRoot, {\n    platforms,\n    packageName,\n    bundleIdentifier,\n  });\n\n  if (templateChecksum) {\n    // Prepare template checksum for the patch mods\n    config._internal = config._internal ?? {};\n    config._internal.templateChecksum = templateChecksum;\n  }\n\n  // compile all plugins and mods\n  config = await compileModsAsync(config, {\n    projectRoot,\n    platforms,\n    assertMissingModProviders: false,\n  });\n\n  if (env.EXPO_DEBUG) {\n    Log.log();\n    Log.log('Evaluated config:');\n    logConfig(config);\n    Log.log();\n  }\n\n  return config;\n}\n"],"names":["configureProjectAsync","projectRoot","platforms","exp","templateChecksum","bundleIdentifier","includes","getOrPromptForBundleIdentifier","packageName","getOrPromptForPackage","config","getPrebuildConfigAsync","_internal","compileModsAsync","assertMissingModProviders","env","EXPO_DEBUG","Log","log","logConfig"],"mappings":"AAAA;;;;+BAYsBA,uBAAqB;;aAArBA,qBAAqB;;;yBAXG,sBAAsB;;;;;;;yBAC7B,uBAAuB;;;;;;6BAEpC,uBAAuB;2DAC5B,QAAQ;qBACT,cAAc;0CAI3B,mCAAmC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEnC,eAAeA,qBAAqB,CACzCC,WAAmB,EACnB,EACEC,SAAS,CAAA,EACTC,GAAG,CAAA,EACHC,gBAAgB,CAAA,EAKjB,EACoB;IACrB,IAAIC,gBAAgB,AAAoB,AAAC;IACzC,IAAIH,SAAS,CAACI,QAAQ,CAAC,KAAK,CAAC,EAAE;QAC7B,mHAAmH;QACnHD,gBAAgB,GAAG,MAAME,IAAAA,yBAA8B,+BAAA,EAACN,WAAW,EAAEE,GAAG,CAAC,CAAC;IAC5E,CAAC;IACD,IAAIK,WAAW,AAAoB,AAAC;IACpC,IAAIN,SAAS,CAACI,QAAQ,CAAC,SAAS,CAAC,EAAE;QACjC,iHAAiH;QACjHE,WAAW,GAAG,MAAMC,IAAAA,yBAAqB,sBAAA,EAACR,WAAW,EAAEE,GAAG,CAAC,CAAC;IAC9D,CAAC;IAED,IAAI,EAAEA,GAAG,EAAEO,MAAM,CAAA,EAAE,GAAG,MAAMC,IAAAA,eAAsB,EAAA,uBAAA,EAACV,WAAW,EAAE;QAC9DC,SAAS;QACTM,WAAW;QACXH,gBAAgB;KACjB,CAAC,AAAC;IAEH,IAAID,gBAAgB,EAAE;YAEDM,UAAgB;QADnC,+CAA+C;QAC/CA,MAAM,CAACE,SAAS,GAAGF,CAAAA,UAAgB,GAAhBA,MAAM,CAACE,SAAS,YAAhBF,UAAgB,GAAI,EAAE,CAAC;QAC1CA,MAAM,CAACE,SAAS,CAACR,gBAAgB,GAAGA,gBAAgB,CAAC;IACvD,CAAC;IAED,+BAA+B;IAC/BM,MAAM,GAAG,MAAMG,IAAAA,cAAgB,EAAA,iBAAA,EAACH,MAAM,EAAE;QACtCT,WAAW;QACXC,SAAS;QACTY,yBAAyB,EAAE,KAAK;KACjC,CAAC,CAAC;IAEH,IAAIC,IAAG,IAAA,CAACC,UAAU,EAAE;QAClBC,IAAG,CAACC,GAAG,EAAE,CAAC;QACVD,IAAG,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QAC7BC,IAAAA,YAAS,UAAA,EAACT,MAAM,CAAC,CAAC;QAClBO,IAAG,CAACC,GAAG,EAAE,CAAC;IACZ,CAAC;IAED,OAAOR,MAAM,CAAC;AAChB,CAAC"}