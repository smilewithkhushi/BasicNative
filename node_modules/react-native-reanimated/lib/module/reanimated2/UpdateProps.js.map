{"version":3,"names":["processColorsInProps","_updatePropsJS","isFabric","isJest","shouldBeUseWeb","runOnUIImmediately","updateProps","_","updates","maybeViewRef","isAnimatedProps","items","forEach","item","_index","viewDescriptors","global","UpdatePropsManager","update","updatePropsJestWrapper","animatedStyle","adapters","adapter","current","value","createUpdatePropsManager","operations","viewDescriptor","push","shadowNodeWrapper","length","queueMicrotask","flush","_updatePropsFabric","tag","name","_updatePropsPaper","maybeThrowError","Error","Proxy","get","set"],"sources":["UpdateProps.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-redundant-type-constituents */\n'use strict';\nimport type { MutableRefObject } from 'react';\nimport { processColorsInProps } from './Colors';\nimport type { ShadowNodeWrapper, SharedValue, StyleProps } from './commonTypes';\nimport type { AnimatedStyle } from './helperTypes';\nimport type { Descriptor } from './hook/commonTypes';\nimport { _updatePropsJS } from './js-reanimated';\nimport { isFabric, isJest, shouldBeUseWeb } from './PlatformChecker';\nimport type { ViewRefSet } from './ViewDescriptorsSet';\nimport { runOnUIImmediately } from './threads';\n\nlet updateProps: (\n  viewDescriptor: SharedValue<Descriptor[]>,\n  updates: StyleProps | AnimatedStyle<any>,\n  maybeViewRef: ViewRefSet<any> | undefined,\n  isAnimatedProps?: boolean\n) => void;\n\nif (shouldBeUseWeb()) {\n  updateProps = (_, updates, maybeViewRef, isAnimatedProps) => {\n    'worklet';\n    if (maybeViewRef) {\n      maybeViewRef.items.forEach((item, _index) => {\n        _updatePropsJS(updates, item, isAnimatedProps);\n      });\n    }\n  };\n} else {\n  updateProps = (viewDescriptors, updates) => {\n    'worklet';\n    processColorsInProps(updates);\n    global.UpdatePropsManager.update(viewDescriptors, updates);\n  };\n}\n\nexport const updatePropsJestWrapper = (\n  viewDescriptors: SharedValue<Descriptor[]>,\n  updates: AnimatedStyle<any>,\n  maybeViewRef: ViewRefSet<any> | undefined,\n  animatedStyle: MutableRefObject<AnimatedStyle<any>>,\n  adapters: ((updates: AnimatedStyle<any>) => void)[]\n): void => {\n  adapters.forEach((adapter) => {\n    adapter(updates);\n  });\n  animatedStyle.current.value = {\n    ...animatedStyle.current.value,\n    ...updates,\n  };\n\n  updateProps(viewDescriptors, updates, maybeViewRef);\n};\n\nexport default updateProps;\n\nconst createUpdatePropsManager = isFabric()\n  ? () => {\n      'worklet';\n      // Fabric\n      const operations: {\n        shadowNodeWrapper: ShadowNodeWrapper;\n        updates: StyleProps | AnimatedStyle<any>;\n      }[] = [];\n      return {\n        update(\n          viewDescriptors: SharedValue<Descriptor[]>,\n          updates: StyleProps | AnimatedStyle<any>\n        ) {\n          viewDescriptors.value.forEach((viewDescriptor) => {\n            operations.push({\n              shadowNodeWrapper: viewDescriptor.shadowNodeWrapper,\n              updates,\n            });\n            if (operations.length === 1) {\n              queueMicrotask(this.flush);\n            }\n          });\n        },\n        flush(this: void) {\n          global._updatePropsFabric!(operations);\n          operations.length = 0;\n        },\n      };\n    }\n  : () => {\n      'worklet';\n      // Paper\n      const operations: {\n        tag: number;\n        name: string;\n        updates: StyleProps | AnimatedStyle<any>;\n      }[] = [];\n      return {\n        update(\n          viewDescriptors: SharedValue<Descriptor[]>,\n          updates: StyleProps | AnimatedStyle<any>\n        ) {\n          viewDescriptors.value.forEach((viewDescriptor) => {\n            operations.push({\n              tag: viewDescriptor.tag,\n              name: viewDescriptor.name || 'RCTView',\n              updates,\n            });\n            if (operations.length === 1) {\n              queueMicrotask(this.flush);\n            }\n          });\n        },\n        flush(this: void) {\n          global._updatePropsPaper!(operations);\n          operations.length = 0;\n        },\n      };\n    };\n\nif (shouldBeUseWeb()) {\n  const maybeThrowError = () => {\n    // Jest attempts to access a property of this object to check if it is a Jest mock\n    // so we can't throw an error in the getter.\n    if (!isJest()) {\n      throw new Error(\n        '[Reanimated] `UpdatePropsManager` is not available on non-native platform.'\n      );\n    }\n  };\n  global.UpdatePropsManager = new Proxy({} as UpdatePropsManager, {\n    get: maybeThrowError,\n    set: () => {\n      maybeThrowError();\n      return false;\n    },\n  });\n} else {\n  runOnUIImmediately(() => {\n    'worklet';\n    global.UpdatePropsManager = createUpdatePropsManager();\n  })();\n}\n\nexport interface UpdatePropsManager {\n  update(\n    viewDescriptors: SharedValue<Descriptor[]>,\n    updates: StyleProps | AnimatedStyle<any>\n  ): void;\n  flush(): void;\n}\n"],"mappings":"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","ignoreList":[]}